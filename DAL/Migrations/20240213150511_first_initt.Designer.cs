// <auto-generated />
using DAL.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(NTierKodlamaDbContext))]
    [Migration("20240213150511_first_initt")]
    partial class first_initt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Programlama"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CourseName = "Senior Yazılım Geliştirici Yetiştirme Kampı (.NET)",
                            Description = "Senior Yazılım Geliştirici Yetiştirme Kampımızın takip, döküman ve duyurularını buradan yapacağız.",
                            InstructorId = 1,
                            IsFree = true,
                            Price = 10.0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CourseName = "2024 Yazılım Geliştirici Yetiştirme Kampı (C#)",
                            Description = "Yazılım Geliştirici Yetiştirme Kampımızın takip, döküman ve duyurularını buradan yapacağız.",
                            InstructorId = 1,
                            IsFree = true,
                            Price = 10.0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CourseName = "(2023) Yazılım Geliştirici Yetiştirme Kampı - Python & Selenium",
                            Description = "Python & Selenium Yazılım Geliştirici Yetiştirme Kampımızın takip, döküman ve duyurularını buradan yapacağız",
                            InstructorId = 2,
                            IsFree = true,
                            Price = 10.0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CourseName = "(2022) Yazılım Geliştirici Yetiştirme Kampı - JAVA",
                            Description = "Java Yazılım Geliştirici Yetiştirme Kampımızın takip, döküman ve duyurularını buradan yapacağız.",
                            InstructorId = 1,
                            IsFree = true,
                            Price = 10.0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CourseName = "Yazılım Geliştirici Yetiştirme Kampı (JavaScript)",
                            Description = "1,5 ay sürecek Yazılım Geliştirici Yetiştirme Kampımızın takip, döküman ve duyurularını buradan yapacağız",
                            InstructorId = 1,
                            IsFree = true,
                            Price = 10.0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CourseName = "Yazılım Geliştirici Yetiştirme Kampı (JAVA + REACT)",
                            Description = "2 ay sürecek Yazılım Geliştirici Yetiştirme Kampımızın takip, döküman ve duyurularını buradan yapacağız",
                            InstructorId = 1,
                            IsFree = true,
                            Price = 10.0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CourseName = "Yazılım Geliştirici Yetiştirme Kampı (C# + ANGULAR)",
                            Description = "2 ay sürecek Yazılım Geliştirici Yetiştirme Kampımızın takip, döküman ve duyurularını buradan yapacağız",
                            InstructorId = 1,
                            IsFree = true,
                            Price = 10.0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CourseName = "Programlamaya Giriş için Temel Kurs",
                            Description = "PYTHON, JAVA, C# gibi tüm programlama dilleri için temel programlama mantığını anlaşılır örneklerle öğrenin.",
                            InstructorId = 1,
                            IsFree = true,
                            Price = 10.0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Engin",
                            LastName = "Demiroğ"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Halit Enes",
                            LastName = "Kalaycı"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Course", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Entities.Concrete.Instructor", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
